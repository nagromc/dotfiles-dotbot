[alias]
    ada = add .
    ads = "!sh -c 'git add ${@} && git st' -"
    adsa = "!sh -c 'git ads .' -"
    amd = commit --amend
    amdn = commit --amend --no-edit
    bi = bisect
    bib = bisect bad
    big = bisect good
    bil = bisect log
    bir = bisect reset
    bisk = bisect skip
    bist = bisect start
    biv = bisect visualize
    br = branch
    brd = branch -d
    brls = branch -vv
    brlsa = branch --all -vv
    brlsr = branch --remote -vv
    # useful for other aliases
    branch-name = "!sh -c 'git rev-parse --abbrev-ref HEAD' -"
    ci = commit
    cia = commmit --all
    ciam = commit --all --message
    ciams = commit --all --gpg-sign --message
    ciamns = commit --all --no-gpg-sign --message
    cias = commit --all --gpg-sign
    cians = commit --all --no-gpg-sign
    cim = commit --message
    cims = commit --gpg-sign --message
    cimns = commit --no-gpg-sign --message
    # undo the previous commit keeping the changes
    ciundo = reset --soft HEAD^
    cl = clean -d --dry-run
    clf = clean -d --force
    cli = clean -d --interactive
    co = checkout
    cob = checkout -b
    # checkout latest tag
    colt = "!sh -c 'git fetch --tags && git checkout $(git latest-tag)' -"
    confed = config --global --edit
    confedloc = "! vim ~/.gitconfig_local"
    cp = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue
    df = diff --word-diff=color
    dfs = "!sh -c 'git df --cached' -"
    fe = fetch
    fl = flow
    flf = flow feature
    flfs = flow feature start
    flff = flow feature finish
    flh = flow hotfix
    flhs = flow hotfix start
    flhf = flow hotfix finish
    flr = flow release
    flrs = flow release start
    flrf = flow release finish
    ignore = update-index --assume-unchanged
    ignoreinv = update-index --no-assume-unchanged
    # useful for other aliases
    latest-tag = "!sh -c 'git describe --tags $(git rev-list --tags --max-count=1)' -"
    # log including remote
    lg = "!sh -c 'git logg origin/$(git branch-name) $(git branch-name) ${@}' -"
    lgv = "!sh -c 'git loggv origin/$(git branch-name) $(git branch-name) ${@}' -"
    lgvv = "!sh -c 'git loggvv origin/$(git branch-name) $(git branch-name) ${@}' -"
    # log including every known branch (local or remote)
    lga = "!sh -c 'git logg --branches --remotes --tags ${@}' -"
    lgav = "!sh -c 'git loggv --branches --remotes --tags ${@}' -"
    lgavv = "!sh -c 'git loggvv --branches --remotes --tags ${@}' -"
    # log only the local branch
    lgl = "!sh -c 'git logg ${@}' -"
    lglv = "!sh -c 'git loggv ${@}' -"
    lglvv = "!sh -c 'git loggvv ${@}' -"
    # base log graph command
    logg = log --graph --abbrev-commit --decorate
    loggv = log --graph --abbrev-commit --decorate --format=format:'%C(red)%h%C(reset) - %C(cyan)%aD%C(reset) %C(green)(%ar)%C(reset)%C(auto)%d%C(reset)%<(9)%n%C(blue)<%an> (%G?)%C(reset)%<(13)%n%s'
    loggvv = log --graph --abbrev-commit --decorate --format=format:'%C(red)%h%C(reset) - %C(cyan)%aD [A]%C(reset) %C(green)(%ar)%C(reset) - %C(magenta)%cD [C]%C(reset) %C(green)(%cr)%C(reset) %C(auto)%d%C(reset)%<(9)%n%C(blue)<%an> [A]%C(reset) - %C(yellow)<%cn> [C] (%G?)%C(reset)%<(13)%n%s'
    me = merge --no-ff
    mea = merge --abort
    mec = merge --continue
    mt = mergetool
    patch = format-patch --output-directory /tmp
    pl = pull
    plum = pull upstream master
    ps = push
    psa = push --all
    psf = push --force
    pst = push --tags
    psu = "!sh -c 'git push --set-upstream origin $(git branch-name)' -"
    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbi = rebase --interactive
    rbs = rebase --skip
    rem = remote
    # add a remote forked repo (e.g. `git remau https://github.com/user/forked-repo.git`)
    remau = remote add upstream
    # delete a branch on the repo
    remdbr = push --delete origin
    # delete a tag on the repo. Yeah, this is the same alias for deleting a branch but my brain works like that okay?
    remdt = push --delete origin
    # remove the deleted remote branches existing on the local repo
    remsyncbr = remote prune origin
    remv = remote -v
    restore = checkout --
    # to use after `git reflog'
    rewind = "!sh -c 'git reset --hard HEAD@{${1}}' -"
    rs = reset
    rsh = reset --hard
    rv = revert
    rva = revert --abort
    rvc = revert --continue
    sb = show-branch
    sbc = show-branch --current
    sbt = show-branch --topic
    sh = show
    shv = show --pretty=fuller --date=iso
    sm = submodule
    sms = submodule sync
    smu = submodule update --init --recursive
    smur = submodule update --init --recursive --remote
    ssa = "!sh -c 'git stash apply --index stash@{${1}}' -"
    # show stash diff for tracked files
    ssdif = "!sh -c 'git stash show --patch-with-stat --word-diff=color stash@{${1}} | less' -"
    # show stash diff for *UN*tracked files
    ssdifu = "!sh -c 'git show --patch stash@{${1}}^3' -"
    ssls = stash list
    ssp = stash pop
    ssrm = "!sh -c 'git stash drop stash@{${1}}' -"
    sss = stash save --include-untracked
    st = status
    sti = status --ignored
    tg = tag
    tgd = tag --delete
    # unstage changes
    uns = reset HEAD
[clean]
    # explicitly set requireForce to true to avoid accidents
    requireForce = true
[color]
    diff = auto
    ui = auto
[color "status"]
    added = green
    changed = blue
    untracked = magenta
    updated = green
[commit]
    gpgSign = true
[core]
    editor = vim
    excludesfile = ~/.gitignore_global
    pager = less -F -S -R -X
    whitespace = blank-at-eol,space-before-tab,tab-in-indent,blank-at-eof
[credential]
    helper = cache --timeout=28800
[credential "https://github.com"]
    username = nagromc
[format]
    pretty = %C(red)%h%C(reset) -%C(auto)%d%C(reset) %s %C(green)(%ad)%C(reset) %C(blue)<%an>%C(reset)
[http]
    #proxy = http://<user>:<password>@<host_name>:<host_port>
[init]
    templatedir = ~/.git_template
[log]
    date = relative
[merge]
    tool = vimdiff
[pager]
    stash = false
[pull]
    rebase = preserve
[push]
    default = simple
    gpgSign = if-asked
[status]
    branch = true
    short = true
[user]
    name = Morgan Courbet
    email = ping@morgan.ploki.fr
    signingkey = 24A21B24
# local customization
[include]
    path = ~/.gitconfig_local
